/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.vista;

import com.controlador.ControladorAdmin;
import com.modelo.Curso;
import com.modelo.Profesor;
import java.awt.Frame;
import javax.swing.JOptionPane;
import java.io.IOException;
import java.lang.ClassNotFoundException;
import java.util.ArrayList; // Added for ArrayList<Curso> type

/**
 *
 * @author SOTO PC
 */
public class FormularioDocente extends javax.swing.JDialog {
     private ControladorAdmin controlador;

     public FormularioDocente(Frame parent, ControladorAdmin controlador) {
        super(parent, "Agregar Docente", true); 
        this.controlador = controlador;
        initComponents();
        cargarCursos();
        configurarComponentes();
        this.setLocationRelativeTo(parent); 
    }

    private void configurarComponentes() {
        txtNombre.setToolTipText("Ingrese el nombre del docente");
        txtEdad.setToolTipText("Ingrese la edad");
        txtCedula.setToolTipText("Ingrese la cédula");
        txtCodigo.setToolTipText("Ingrese el código único");
        cmbCursos.setToolTipText("Seleccione el curso a asignar");
    }
     
    private void cargarCursos() {
        cmbCursos.removeAllItems(); 
        try {
            ArrayList<Curso> cursos = controlador.getCursos(); // Call can throw
            if (cursos == null || cursos.isEmpty()) { // cursos can be null if an error occurs before list creation in DAO or if DAO returns null (though current DAOs return empty list)
                // cmbCursos.addItem(null); // Adding null might not be desired. Maybe an empty string or disable.
                                          // For now, if empty, the combo box will just be empty.
            } else {
                for (Curso curso : cursos) {
                    cmbCursos.addItem(curso); 
                }
            }
        } catch (IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar lista de cursos: " + e.getMessage(), "Error de Datos", JOptionPane.ERROR_MESSAGE);
            // Optionally disable cmbCursos or add a specific "Error" item
            // cmbCursos.setEnabled(false); 
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        txtNombre = new javax.swing.JTextField();
        txtEdad = new javax.swing.JTextField();
        txtCedula = new javax.swing.JTextField();
        txtCodigo = new javax.swing.JTextField();
        cmbCursos = new javax.swing.JComboBox<>();
        btnGuardar = new javax.swing.JButton();
        lblTitulo = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        lblNombre = new javax.swing.JLabel();
        lblEdad = new javax.swing.JLabel();
        lblCedula = new javax.swing.JLabel();
        lblCodigo = new javax.swing.JLabel();
        lblCurso = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Agregar Nuevo Docente");

        lblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 18)); 
        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitulo.setText("Agregar Docente");

        lblNombre.setText("Nombre:");
        lblEdad.setText("Edad:");
        lblCedula.setText("Cédula:");
        lblCodigo.setText("Código:");
        lblCurso.setText("Curso Asignado:");

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);

        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE) 
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitulo, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEdad)
                            .addComponent(lblCedula)
                            .addComponent(lblCodigo)
                            .addComponent(lblCurso))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(txtEdad)
                            .addComponent(txtCedula)
                            .addComponent(txtCodigo)
                            .addComponent(cmbCursos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55,55,55))) 
                .addContainerGap(20, Short.MAX_VALUE)) 
        );
        
        lblNombre.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEdad.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCedula.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCodigo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCurso.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);


        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE) 
                .addComponent(lblTitulo)
                .addGap(18, 18, 18) 
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEdad)
                    .addComponent(txtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCedula)
                    .addComponent(txtCedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCodigo)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCurso)
                    .addComponent(cmbCursos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25) 
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar)
                    .addComponent(btnCancelar))
                .addContainerGap(20, Short.MAX_VALUE)) 
        );
        pack();
    }// </editor-fold>                        

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {                                         
        try {
            String nombre = txtNombre.getText().trim();
            String edadStr = txtEdad.getText().trim();
            String cedulaStr = txtCedula.getText().trim();
            String codigoStr = txtCodigo.getText().trim();
            Curso cursoSeleccionado = (Curso) cmbCursos.getSelectedItem();

            if (nombre.isEmpty() || edadStr.isEmpty() || cedulaStr.isEmpty() || codigoStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.", "Error de Validación", JOptionPane.ERROR_MESSAGE);
                return;
            }
             if (cursoSeleccionado == null && cmbCursos.getItemCount() > 0) { 
                JOptionPane.showMessageDialog(this, "Debe seleccionar un curso.", "Error de Validación", JOptionPane.ERROR_MESSAGE);
                return;
            }


            int edad = Integer.parseInt(edadStr);
            int cedula = Integer.parseInt(cedulaStr);
            int codigo = Integer.parseInt(codigoStr);

            if (edad <= 0 || cedula <= 0 || codigo <= 0) {
                 JOptionPane.showMessageDialog(this, "Edad, cédula y código deben ser números positivos.", "Error de Validación", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (controlador.buscarProfesor(codigo) != null || controlador.buscarEstudiante(codigo) != null) {
                 JOptionPane.showMessageDialog(this, "El código ingresado ya existe para otra persona.", "Error de Duplicación", JOptionPane.ERROR_MESSAGE);
                return;
            }


            Profesor profesor = new Profesor(nombre, edad, cedula, codigo, "Profesor"); 
            controlador.agregarProfesor(profesor); 

            if (cursoSeleccionado != null) {
                controlador.asignarCursoAProfesor(codigo, cursoSeleccionado.getGrado(), cursoSeleccionado.getGrupo());
            }

            JOptionPane.showMessageDialog(this, "Docente agregado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                "Error en campos numéricos: edad, cédula o código deben ser números válidos.", 
                "Error de Formato", 
                JOptionPane.ERROR_MESSAGE
            );
        } catch (IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Error de persistencia de datos: " + e.getMessage(), "Error de Datos", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace(); // For debugging
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Ocurrió un error inesperado: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }                                        

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {                                         
        this.dispose(); 
    }                                        

    // Variables declaration - do not modify                     
    private javax.swing.JComboBox<Curso> cmbCursos; // Renamed from Cursos
    private javax.swing.JButton btnGuardar;    // Renamed from jButton1
    private javax.swing.JButton btnCancelar;   // Renamed from jButton2
    private javax.swing.JLabel lblTitulo;      // Renamed from jLabel1
    private javax.swing.JLabel lblNombre;      // Renamed from jLabel2
    private javax.swing.JLabel lblEdad;        // Renamed from jLabel3
    private javax.swing.JLabel lblCedula;      // Renamed from jLabel4
    private javax.swing.JLabel lblCodigo;      // Renamed from jLabel5
    private javax.swing.JLabel lblCurso;       // Renamed from jLabel6
    private javax.swing.JTextField txtNombre;  // Renamed from jTextField1
    private javax.swing.JTextField txtEdad;    // Renamed from jTextField2
    private javax.swing.JTextField txtCedula;  // Renamed from jTextField3
    private javax.swing.JTextField txtCodigo;  // Renamed from jTextField4
    // End of variables declaration                   
}
